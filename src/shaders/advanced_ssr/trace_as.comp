#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#include <screen_trace.glsl>
#include <brdf.glsl>

layout (set = 0, binding = 0) uniform sampler2D DEPTH;
layout (set = 0, binding = 1) uniform sampler2D NORMAL;
layout (set = 0, binding = 2) uniform sampler2D MATERIAL;

layout (set = 0, binding = 3) uniform TraceParams {
  mat4 normal_mat;
  uint frame_random;
  float fovy;
  float aspect;
  float znear;
  float zfar;
};
#define M_PI 3.1415926535897932384626433832795
#define HALTON_SEQ_SIZE 128

layout (set = 0, binding = 4) uniform HaltonBuffer {
  vec4 halton_vec[HALTON_SEQ_SIZE];
};

layout (set = 0, binding = 5) uniform accelerationStructureEXT TRIANGLE_AS;

layout (push_constant) uniform PushConstants {
  float max_roughness;
};

vec3 get_tangent(in vec3 n);

layout (set = 0, binding = 6, rgba16) uniform image2D OUT_RAY;

float rand(vec2 co);

layout (local_size_x = 8, local_size_y = 8) in;
void main() {
  ivec2 tex_size = imageSize(OUT_RAY);//ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
  ivec2 pixel_pos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
  vec2 screen_uv = vec2(pixel_pos + vec2(0.5, 0.5))/vec2(tex_size);

  if (pixel_pos.x >= tex_size.x || pixel_pos.y >= tex_size.y) {
    return;
  }
  vec3 material = texture(MATERIAL, screen_uv).rgb;

  float roughness = material.g;
  material.g = mix(0.0, max_roughness, roughness);
  roughness = material.g * material.g;

  float pixel_depth = texture(DEPTH, screen_uv).x;
  vec3 pixel_normal_world = sample_gbuffer_normal(NORMAL, screen_uv);
  vec3 pixel_normal = normalize((normal_mat * vec4(pixel_normal_world, 0)).xyz);
  vec3 view_vec = reconstruct_view_vec(screen_uv, pixel_depth, fovy, aspect, znear, zfar);

  //halton random
  const uint base_index = uint(rand(screen_uv) * HALTON_SEQ_SIZE);
  uint index = (base_index + frame_random) & (HALTON_SEQ_SIZE - 1);
  vec2 rnd = halton_vec[index].xy;
  //sample microphaset normal 
  vec3 tangent = get_tangent(pixel_normal);
  vec3 bitangent = normalize(cross(pixel_normal, tangent));
  tangent = normalize(cross(bitangent, pixel_normal));

  vec3 view_dir = -normalize(view_vec); //e = (tangent, bitangent, normal)
  view_dir = vec3(
    dot(view_dir, tangent),
    dot(view_dir, bitangent),
    dot(view_dir, pixel_normal));

  vec3 brdf_norm = sampleGGXVNDF(view_dir, roughness, roughness, rnd.x, rnd.y);
  vec3 N = brdf_norm.x * tangent + brdf_norm.y * bitangent + brdf_norm.z * pixel_normal;
  vec3 R = reflect(view_vec, N); 
  
  rayQueryEXT ray_query;
	rayQueryInitializeEXT(ray_query, TRIANGLE_AS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, 0.999 * view_vec, 0.005, R, 15.0);

  while (rayQueryProceedEXT(ray_query)) {}

  bool valid_hit = rayQueryGetIntersectionTypeEXT(ray_query, true) != gl_RayQueryCommittedIntersectionNoneEXT;
  
  vec3 ray_start = project_view_vec(view_vec + 0.001 * pixel_normal, fovy, aspect, znear, zfar);
  ray_start.z -= 0.0001;
  vec3 out_ray = ray_start;

  if (valid_hit) {
    float t = rayQueryGetIntersectionTEXT(ray_query, true);
    vec3 hit_camera = view_vec + t * R;
    out_ray = project_view_vec(hit_camera, fovy, aspect, znear, zfar);
  }

  if (valid_hit) {
    vec2 ray_step = abs(out_ray.xy - ray_start.xy) * tex_size;
    if (max(ray_step.x, ray_step.y) < 2.0) {
      valid_hit = false;
    }
  }
  
  if (valid_hit)
  {
    vec3 hit_normal_world = sample_gbuffer_normal(NORMAL, out_ray.xy);
    vec3 hit_normal = (normal_mat * vec4(hit_normal_world, 0)).xyz;

    if (dot(hit_normal, R) > 0 || dot(pixel_normal, R) < 0) {
      valid_hit = false;
    }
  }

  if (valid_hit) {  
    float hit_depth = textureLod(DEPTH, out_ray.xy, 0).x;
    float hit_z = linearize_depth2(hit_depth, znear, zfar);
    float ray_z = linearize_depth2(out_ray.z, znear, zfar);
    if (ray_z > hit_z + 0.3 || ray_z < hit_z - 0.1) {
      valid_hit = false;
    }
  }

  vec4 out_ray_info = vec4(0, 0, 1, 1);
  out_ray_info = vec4(out_ray, valid_hit? pixel_depth : 1.0);
  imageStore(OUT_RAY, pixel_pos, out_ray_info);
}

vec3 get_tangent(in vec3 n) {
  float max_xy = max(abs(n.x), abs(n.y));
  vec3 t;
  
  if (max_xy < 0.00001) {
    t = vec3(1, 0, 0);
  } else {
    t = vec3(n.y, -n.x, 0);
  }

  return normalize(t);
}

float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float distance_squared(vec3 a, vec3 b) {
  vec3 c = b - a;
  return dot(c, c);
}
