#version 460
#include <gbuffer_encode.glsl>

struct VkAABB {
  float min_x;
  float min_y;
  float min_z;
  float max_x;
  float max_y;
  float max_z;
};

layout (set = 0, binding = 0) uniform sampler2D DEPTH_TEX;
layout (set = 0, binding = 1, std430) buffer OUT_BUFFER {
  VkAABB aabbs[];
};

layout (push_constant) uniform PushConstants {
  float fovy;
  float aspect;
  float znear;
  float zfar;
};


layout (local_size_x = 8, local_size_y = 4) in;
void main() {
  ivec2 tex_size = ivec2(textureSize(DEPTH_TEX, 0));
  ivec2 pixel_pos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
  if (any(greaterThanEqual(pixel_pos, tex_size)))
    return;

  vec2 uv = (vec2(pixel_pos) + vec2(0.5, 0.5))/tex_size;
  int offset = pixel_pos.y * tex_size.x + pixel_pos.x;
  float depth = texture(DEPTH_TEX, uv).x;

  vec2 uv_top = (vec2(pixel_pos))/tex_size;
  vec2 uv_bot = (vec2(pixel_pos) + vec2(1.0, 1.0))/tex_size;

  vec3 camera = reconstruct_view_vec(uv, depth, fovy, aspect, znear, zfar);
  float camera_len = length(camera);
  
  const float THIKNESS = 0.15;
  
  camera = (camera_len + THIKNESS) * normalize(camera);
  float camera_depth = encode_depth(camera.z, znear, zfar);

  //VkAABB aabb = VkAABB(vmin.x, vmin.y, vmin.z, vmax.x, vmax.y, vmax.z);
  VkAABB aabb = VkAABB(uv_top.x, uv_top.y, depth, uv_bot.x, uv_bot.y, camera_depth);
  aabbs[offset] = aabb;
}