#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#include <gbuffer_encode.glsl>

layout (set = 0, binding = 0) uniform sampler2D DEPTH_TEX;
layout (set = 0, binding = 1, r8) uniform writeonly image2D OUT_SHADOW; 

layout (set = 0, binding = 2) uniform Constants {
  mat4 camera_mat;
  float fovy;
  float aspect;
  float znear;
  float zfar;
};

layout (set = 0, binding = 3) uniform accelerationStructureEXT TRIANGLE_AS;

#define MAX_LIGHTS 5

struct Light {
  vec4 position;
  vec4 color;
};

layout (set = 0, binding = 4) uniform LightsBuffer {
  Light g_lights[MAX_LIGHTS];
};


bool trace_light_source(in vec3 light_pos, in vec3 view_vec);

const vec3 LIGHT_POS = vec3(0, 2, 0);

layout (local_size_x = 8, local_size_y = 4) in;
void main()
{
  ivec2 tex_size = imageSize(OUT_SHADOW);//ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
  ivec2 pixel_pos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
  vec2 screen_uv = vec2(pixel_pos + vec2(0.5, 0.5))/vec2(tex_size);

  if (pixel_pos.x >= tex_size.x || pixel_pos.y >= tex_size.y) {
    return;
  }

  float pixel_depth = texture(DEPTH_TEX, screen_uv).x;
  vec3 view_vec = reconstruct_view_vec(screen_uv, pixel_depth, fovy, aspect, znear, zfar);
  
  
  float occlusion = 0.f;

  for (uint i = 0; i < MAX_LIGHTS; i++) {
    vec3 light_pos = vec3(camera_mat * g_lights[i].position);
    occlusion += trace_light_source(light_pos, view_vec)? 0.f : (1.f/MAX_LIGHTS);
  }


  imageStore(OUT_SHADOW, pixel_pos, vec4(occlusion, 0.f, 0.f, 0.f));
}

bool trace_light_source(in vec3 light_pos, in vec3 view_vec) {
  vec3 direction = normalize(light_pos - view_vec);
  
  rayQueryEXT ray_query;
	rayQueryInitializeEXT(ray_query, TRIANGLE_AS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, 0.999 * view_vec, 0.005, direction, 1.0);

  while (rayQueryProceedEXT(ray_query)) {}

  return rayQueryGetIntersectionTypeEXT(ray_query, true) != gl_RayQueryCommittedIntersectionNoneEXT;
}