#version 450 

#include "../include/gbuffer_encode.glsl"
#include "../include/brdf.glsl"

layout (set = 0, binding = 0) uniform sampler2D ALBEDO_TEX;
layout (set = 0, binding = 1) uniform sampler2D NORMAL_TEX;
layout (set = 0, binding = 2) uniform sampler2D MATERIAL_TEX;
layout (set = 0, binding = 3) uniform sampler2D DEPTH_TEX;
layout (set = 0, binding = 4) uniform sampler2D SHADOW_TEX;
layout (set = 0, binding = 5) uniform sampler2D OCCLUSION_TEX;

layout (set = 0, binding = 6) uniform Constants {
  mat4 inverse_camera;
  float fovy;
  float aspect;
  float znear;
  float zfar;
};

#define MAX_LIGHTS 5

struct Light {
  vec4 position;
  vec4 color;
};

layout (set = 0, binding = 7, std140) uniform LightsBuffer {
  Light g_lights[MAX_LIGHTS];
};

layout (push_constant) uniform PushConsts
{
  uint enable_ss_effects;
};

layout (set = 0, binding = 8, rgba16f) uniform image2D OUT_DIFFUSE_TEX;
layout (set = 0, binding = 9, rgba16f) uniform image2D OUT_SPECULAR_TEX;

layout (local_size_x = 8, local_size_y = 4) in;
void main() {
  ivec2 tex_size = imageSize(OUT_DIFFUSE_TEX);
  ivec2 pixel_pos = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
  vec2 screen_uv = vec2(pixel_pos + vec2(0.5, 0.5))/vec2(tex_size);

  if (pixel_pos.x >= tex_size.x || pixel_pos.y >= tex_size.y) {
    return;
  }

  vec3 normal = sample_gbuffer_normal(NORMAL_TEX, screen_uv);
  vec3 albedo = texture(ALBEDO_TEX, screen_uv).xyz;
  vec4 material = texture(MATERIAL_TEX, screen_uv);
  float depth = textureLod(DEPTH_TEX, screen_uv, 0).x;
  float occlusion = texture(OCCLUSION_TEX, screen_uv).x;
  float shadow = texture(SHADOW_TEX, screen_uv).x;

  if (enable_ss_effects == 0)
  {
    shadow = 1.0; 
    occlusion = 1.0;
  }
  
  vec3 camera_view_vec = reconstruct_view_vec(screen_uv, depth, fovy, aspect, znear, zfar);
  vec3 world_pos = (inverse_camera * vec4(camera_view_vec, 1)).xyz;
  vec3 camera_pos = (inverse_camera * vec4(0, 0, 0, 1)).xyz;

  const float metallic = mix(0.1, 1.0, material.b);
  const float roughness = material.g;

  const vec3 V = normalize(camera_pos - world_pos);
  const vec3 N = normal;
  float NdotV = max(dot(N, V), 0);

  vec3 F0 = F0_approximation(albedo, metallic);
  
  vec3 diffuse_light = vec3(0, 0, 0);
  vec3 specular_light = vec3(0, 0, 0);

  for (uint light_id = 0; light_id < MAX_LIGHTS; light_id++)
  {
    vec3 light_pos = g_lights[light_id].position.xyz;
    vec3 light_radiance = g_lights[light_id].color.xyz;

    vec3 L = normalize(light_pos - world_pos);
    vec3 H = normalize(V + L);

    float light_distance = length(light_pos - world_pos);
    vec3 radiance = light_radiance * min(100/(light_distance * light_distance), 100.0);

    float NdotL = max(dot(N, L), 0);
    

    float NDF = DistributionGGX(N, H, roughness);        
    float G = brdfG2(NdotV, NdotL, roughness * roughness);
    vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);  

    //vec3 kS = F;
    vec3 kD = (vec3(1.0) - F) * vec3(1 - metallic);

  
    vec3 specular = (NDF * G * F)/(4.0 * NdotV * NdotL + 0.0001);
    //Lo += (kD * albedo/PI + specular) * radiance * NdotL;
    diffuse_light += kD * albedo/PI * radiance * NdotL;
    specular_light += specular * radiance * NdotV;
  }

  //AO fake
  diffuse_light *= occlusion * shadow;
  specular_light *= occlusion * shadow;

  //Ambient light
  const vec3 ambient_light = vec3(0.1);
  diffuse_light += occlusion * albedo * ambient_light;

  imageStore(OUT_DIFFUSE_TEX, pixel_pos, vec4(diffuse_light, 0));
  imageStore(OUT_SPECULAR_TEX, pixel_pos, vec4(specular_light, 0));
}